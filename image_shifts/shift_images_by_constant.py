# Script to shift images by a constant amount
import cv2 as cv
import numpy as np
import os

# Visual comparison of the shift maps generated by shift_detection_beads.py shows:
# x: -2, y: -2 shift between red/blue shift map prior to alignment and post alignment (pretty constant, better in x than y)
# x: 2, y: 2 shift between green/blue shift map prior to alignment and post alignment

img_shape = (2160, 2560)
background = 105
x_shift = 2
y_shift = 2

output_path = '/Users/Joel/shares/dataShareJoel/jluethi/20180308_ShrinkageTest_plasticPlate/Cycle1_Shifted'
nbSites = 56
channel_appendix = 'L01A02Z01C02.tif'
wells = ['B02', 'B03', 'B04','C02', 'C03', 'C04','D02', 'D03', 'D04','D05','E02', 'E03', 'E04','E05']
for well in wells:
    print(well)
    for i in range(nbSites):
        site = '%03d' % (i +1)
        base_path = '/Users/Joel/shares/dataShareJoel/jluethi/20180308_ShrinkageTest_plasticPlate/Cycle1/'
        img_base_name = 'AssayPlate_Greiner_655090_' + well + '_T0001F'
        img_name = img_base_name + site + channel_appendix
        img = cv.imread(os.path.join(base_path, img_name), -1)
        new_img = np.full(img_shape, background, dtype= 'uint16')
        output_name = 'Shifted_' + img_name

        # For negative shifts
        # new_img[: - y_shift, : - x_shift] = img[y_shift:, x_shift:]

        # For positive shifts
        new_img[y_shift:, x_shift:] = img[: - y_shift, : - x_shift]

        cv.imwrite(os.path.join(output_path, output_name), new_img)


